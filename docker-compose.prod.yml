## Environment variables template
## PostgreSQL settings
# DB_NAME=postgres 
# DB_USER=postgres 
# DB_PASSWORD=postgres 
#
## Dokploy host settings
# DOCKPLOY_BACKEND_HOST=backend.presentationlab.org 
# DOCKPLOY_FRONTEND_HOST=frontend.presentationlab.org
#
## Backend settings
# SECRET_KEY=random-secret-key-*$&*#@!HDU@D&*@$G@!*&H*D&H& 
# JWT_SIGNING_KEY=random-jwt-signing-key-*$&*#@!HDU@D&*@$G@!*&H*D&H&
#
## Backend Super user
# DJANGO_SUPERUSER_USERNAME=maxuli
# DJANGO_SUPERUSER_PASSWORD='asdfgh1'
# DJANGO_SUPERUSER_EMAIL=maxuli@example.com
#
## Backend security settings OPTIONAL 
# DRF_THROTTLE_RATE_ANON=20/min
# DRF_THROTTLE_RATE_USER=120/min
# JWT_ALGORITHM=HS256
# X_FRAME_OPTIONS=SAMEORIGIN/DENY
# ENABLE_HSTS=false
#
## JWT settings OPTIONAL
# ACCESS_TOKEN_LIFETIME=15
# REFRESH_TOKEN_LIFETIME=7
#
## Backend database OPTIONAL
# DB_SSLMODE=require
# DB_TARGET_SESSION_ATTRS=read-write


## Frontend settings OPTIONAL
# VITE_ACCESS_TOKEN_TTL_MINUTES=15
# VITE_REFRESH_TOKEN_TTL_DAYS=7

services:
  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    # Remove fixed port mapping for production deployment
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend API
  backend:
    build:
      context: ./django-rest-api
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=production
        - DB_HOST=db
        - DB_PORT=5432
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - SECRET_KEY=${SECRET_KEY}
        - ALLOWED_HOSTS=${DOCKPLOY_BACKEND_HOST},${DOCKPLOY_FRONTEND_HOST}
        - CORS_ALLOWED_ORIGINS=https://${DOCKPLOY_BACKEND_HOST},https://${DOCKPLOY_FRONTEND_HOST} 
        - CSRF_TRUSTED_ORIGINS=https://${DOCKPLOY_BACKEND_HOST},https://${DOCKPLOY_FRONTEND_HOST} 
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_THREADS: ${GUNICORN_THREADS:-2}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
    # Use expose instead of ports for Dokploy compatibility
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python wait-for-db.py &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py create_default_superuser &&
             gunicorn backend.wsgi:application --config gunicorn.conf.py"
    networks:
      - app-network
    labels:
      - "dokploy.main-service=backend"
      # Traefik labels for production routing
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${DOCKPLOY_BACKEND_HOST}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # React Frontend
  frontend:
    build:
      context: ./react-shadcn-ui
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=https://${DOCKPLOY_BACKEND_HOST}
        - VITE_ACCESS_TOKEN_TTL_MINUTES=${ACCESS_TOKEN_LIFETIME:-15}
        - VITE_REFRESH_TOKEN_TTL_DAYS=${REFRESH_TOKEN_LIFETIME:-7}
    restart: unless-stopped
    # Use expose instead of ports for Dokploy compatibility
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - app-network
    labels:
      - "dokploy.frontend=true"
      # Traefik labels for production routing
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOCKPLOY_FRONTEND_HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
