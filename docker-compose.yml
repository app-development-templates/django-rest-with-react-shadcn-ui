services:
  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-coursesapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-coursesapp123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    # Remove fixed port mapping for production deployment
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-coursesapp}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend API
  backend:
    build:
      context: ./django-rest-api
      dockerfile: Dockerfile
    restart: unless-stopped
    # Use expose instead of ports for Dokploy compatibility
    expose:
      - "8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD:}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "python wait-for-db.py &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py create_default_superuser &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      - app-network

  # React Frontend
  frontend:
    build:
      context: ./react-shadcn-ui
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
        - ACCESS_TOKEN_TTL_MINUTES=${ACCESS_TOKEN_LIFETIME_MINUTES}
        - REFRESH_TOKEN_TTL_DAYS=${REFRESH_TOKEN_LIFETIME_DAYS}
    restart: unless-stopped
    # Use expose instead of ports for Dokploy compatibility
    expose:
      - "3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
